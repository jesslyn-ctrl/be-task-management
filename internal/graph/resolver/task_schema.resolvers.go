package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.67

import (
	"context"
	"fmt"

	"bitbucket.org/edts/go-task-management/internal/graph/_generated"
	_dl "bitbucket.org/edts/go-task-management/internal/graph/loaders"
	_model "bitbucket.org/edts/go-task-management/internal/model"
	_genModel "bitbucket.org/edts/go-task-management/internal/model/_generated"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input _genModel.CreateTaskInput) (*_model.Task, error) {
	// Call the usecase
	createdTask, err := r.Usecase.TaskUsecase.CreateTask(ctx, input)
	if err != nil {
		return nil, err
	}

	return createdTask, nil
}

// UpdateTaskByID is the resolver for the updateTaskById field.
func (r *mutationResolver) UpdateTaskByID(ctx context.Context, input _genModel.UpdateTaskInput) (*_model.Task, error) {
	// Call the usecase
	updateTaskById, err := r.Usecase.TaskUsecase.UpdateTaskById(ctx, input)
	if err != nil {
		return nil, err
	}

	return updateTaskById, nil
}

// DeleteTaskByID is the resolver for the deleteTaskById field.
func (r *mutationResolver) DeleteTaskByID(ctx context.Context, id string) (bool, error) {
	// Call the usecase
	err := r.Usecase.TaskUsecase.DeleteTaskById(ctx, id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// MoveTaskByID is the resolver for the moveTaskById field.
func (r *mutationResolver) MoveTaskByID(ctx context.Context, input _genModel.MoveTaskInput) (*_model.Task, error) {
	// Call the usecase
	//TODO: find the usecase related to this schema MoveTaskById
	panic(fmt.Errorf("not implemented: MoveTaskById - moveTaskById"))
}

// AssignTask is the resolver for the assignTask field.
func (r *mutationResolver) AssignTask(ctx context.Context, input _genModel.AssignTaskInput) (*_model.Task, error) {
	// Call the usecase
	task, err := r.Usecase.TaskUsecase.AssignTask(ctx, input)
	if err != nil {
		return nil, err
	}

	return task, nil
}

// GetTaskByID is the resolver for the getTaskById field.
func (r *queryResolver) GetTaskByID(ctx context.Context, id string) (*_model.Task, error) {
	task, err := r.Usecase.TaskUsecase.GetTaskByID(ctx, id)
	if err != nil {
		return nil, err
	}
	return task, nil
}

// TasksByTeam is the resolver for the tasksByTeam field.
func (r *queryResolver) TasksByTeam(ctx context.Context, teamID string, status *string) ([]*_model.Task, error) {
	// Call the usecase
	tasks, err := r.Usecase.TaskUsecase.GetTasksByTeam(ctx, teamID, status)
	if err != nil {
		return nil, err
	}

	return tasks, nil
}

// TaskCreated is the resolver for the taskCreated field.
func (r *subscriptionResolver) TaskCreated(ctx context.Context, teamID string) (<-chan *_model.Task, error) {
	// Return the usecase
	return r.Usecase.TaskUsecase.TaskCreatedEvent(ctx, teamID), nil
}

// TaskUpdated is the resolver for the taskUpdated field.
func (r *subscriptionResolver) TaskUpdated(ctx context.Context, teamID string) (<-chan *_model.Task, error) {
	// Return the usecase
	return r.Usecase.TaskUsecase.TaskUpdatedEvent(ctx, teamID), nil
}

// TaskDeleted is the resolver for the taskDeleted field.
func (r *subscriptionResolver) TaskDeleted(ctx context.Context, teamID string) (<-chan *_genModel.DeletedTaskNotification, error) {
	// Return the usecase
	return r.Usecase.TaskUsecase.TaskDeletedEvent(ctx, teamID), nil
}

// AssignedUser is the resolver for the assignedUser field.
func (r *taskResolver) AssignedUser(ctx context.Context, obj *_model.Task) (*_model.User, error) {
	if obj.AssignedTo == nil {
		return nil, nil
	}
	return _dl.For(ctx).UserLoader.Load(ctx, *obj.AssignedTo)
}

// CreatedBy is the resolver for the createdBy field.
func (r *taskResolver) CreatedBy(ctx context.Context, obj *_model.Task) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - createdBy"))
}

// ModifiedBy is the resolver for the modifiedBy field.
func (r *taskResolver) ModifiedBy(ctx context.Context, obj *_model.Task) (*string, error) {
	panic(fmt.Errorf("not implemented: ModifiedBy - modifiedBy"))
}

// Subscription returns _generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() _generated.SubscriptionResolver { return &subscriptionResolver{r} }

// Task returns _generated.TaskResolver implementation.
func (r *Resolver) Task() _generated.TaskResolver { return &taskResolver{r} }

type subscriptionResolver struct{ *Resolver }
type taskResolver struct{ *Resolver }
