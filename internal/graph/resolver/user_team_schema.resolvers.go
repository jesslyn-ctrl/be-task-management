package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.67

import (
	"context"
	"fmt"

	"bitbucket.org/edts/go-task-management/internal/graph/_generated"
	_model "bitbucket.org/edts/go-task-management/internal/model"
	_genModel "bitbucket.org/edts/go-task-management/internal/model/_generated"
)

// AssignUserToTeam is the resolver for the assignUserToTeam field.
func (r *mutationResolver) AssignUserToTeam(ctx context.Context, input _genModel.AssignUserToTeamInput) (*_model.Team, error) {
	// Call the usecase
	team, err := r.Usecase.UserUsecase.AssignUserToTeam(ctx, input)
	if err != nil {
		return nil, err
	}
	return team, nil
}

// GetAssigneeByTeam is the resolver for the getAssigneeByTeam field.
func (r *queryResolver) GetAssigneeByTeam(ctx context.Context, teamID string) ([]*_genModel.AssignedUsers, error) {
	usersTeam, err := r.Usecase.UserUsecase.GetAssigneeByTeam(ctx, teamID)
	if err != nil {
		return nil, err
	}
	return usersTeam, nil
}

// User is the resolver for the user field.
func (r *userTeamResolver) User(ctx context.Context, obj *_model.UserTeam) (*_model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Team is the resolver for the team field.
func (r *userTeamResolver) Team(ctx context.Context, obj *_model.UserTeam) (*_model.Team, error) {
	panic(fmt.Errorf("not implemented: Team - team"))
}

// UserTeam returns _generated.UserTeamResolver implementation.
func (r *Resolver) UserTeam() _generated.UserTeamResolver { return &userTeamResolver{r} }

type userTeamResolver struct{ *Resolver }
