package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.67

import (
	"context"
	"fmt"

	"bitbucket.org/edts/go-task-management/internal/graph/_generated"
	"bitbucket.org/edts/go-task-management/internal/model"
	_genModel "bitbucket.org/edts/go-task-management/internal/model/_generated"
)

// CreateTeam is the resolver for the createTeam field.
func (r *mutationResolver) CreateTeam(ctx context.Context, input _genModel.CreateTeamInput) (*model.Team, error) {
	// Call the usecase
	createdTeam, err := r.Usecase.TeamUsecase.CreateTeam(ctx, input)
	if err != nil {
		return nil, err
	}
	return createdTeam, nil
}

// UpdateTeam is the resolver for the updateTeam field.
func (r *mutationResolver) UpdateTeam(ctx context.Context, input _genModel.UpdateTeamInput) (*model.Team, error) {
	// Call the usecase
	updateTeam, err := r.Usecase.TeamUsecase.UpdateTeam(ctx, input)
	if err != nil {
		return nil, err
	}
	return updateTeam, nil
}

// TeamsByUser is the resolver for the teamsByUser field.
func (r *queryResolver) TeamsByUser(ctx context.Context) ([]*_genModel.TeamSummary, error) {
	// Call the usecase
	teams, err := r.Usecase.TeamUsecase.GetTeamsByUser(ctx)
	if err != nil {
		return nil, err
	}
	return teams, nil
}

// CreatedBy is the resolver for the createdBy field.
func (r *teamResolver) CreatedBy(ctx context.Context, obj *model.Team) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedBy - createdBy"))
}

// ModifiedBy is the resolver for the modifiedBy field.
func (r *teamResolver) ModifiedBy(ctx context.Context, obj *model.Team) (*string, error) {
	panic(fmt.Errorf("not implemented: ModifiedBy - modifiedBy"))
}

// Team returns _generated.TeamResolver implementation.
func (r *Resolver) Team() _generated.TeamResolver { return &teamResolver{r} }

type teamResolver struct{ *Resolver }
